import struct
import time
import os.path
import re


def list2_to_bin(alist, path='temp.bin', fmt='B'):
    '''
    :param alist:
    :param path:
    :param fmt:
    :return:
    '''
    # if os.path.isfile(path):
    # 	t = str(int(time.time()))
    # 	path = path +t
    with open(path, 'wb') as bf:
        for item in alist:
            # 读数据可能超过255 随意将 读和写 分配一下 00 00 第一个为读后面都为写
            addr_byte = parse_hex_str_to_int(item[0])
            temp = parse_hex_str_to_int(item[1])
            one_bit_for_read = 15 if temp >= 15 else temp
            thr_bits_for_write = parse_hex_str_to_int(item[2])
            low_bit = thr_bits_for_write % 256
            up_bit = thr_bits_for_write // 256
            firs_byte = struct.pack(fmt, addr_byte)
            second_byte = one_bit_for_read * 16 + up_bit
            second_byte = struct.pack(fmt, second_byte)
            third_byte = struct.pack(fmt, low_bit)
            bf.write(firs_byte)
            bf.write(second_byte)
            bf.write(third_byte)
            # print("firs_byte:%s"%firs_byte)
            # print("second_byte:%s"%second_byte)
            # print("third_byte:%s"%third_byte)
            item = item[3:]
            for i in item:
                try:
                    i = parse_hex_str_to_int(i)
                except Exception as e:
                    print(e)
                else:
                    # print('-----%s-------'%i)
                    i = struct.pack(fmt, i)
                    bf.write(i)


def parse_hex_str_to_int(item):
    if isinstance(item, int):
        return item
    else:
        if not isinstance(item, str):
            raise ValueError("类型错误")
        else:
            if not item.startswith('0x'):
                raise ValueError("字符串不是hex 类型")
            else:
                item = int(item[2:], 16)
                return item


def c_array_to_bin(c_str, target_path=None):
    ''' this function is to parse the c array and write to a bin file
    :param c_str:
    :param target_path: target file path
    :return:
    '''
    fmt = 'B'
    pattern = re.compile('0x[0-9a-f]{1,2}')
    data_list = re.findall(pattern, c_str)
    with open('check.bin', 'wb') as bf:
        for data in data_list:
            data = parse_hex_str_to_int(data)
            p_data = struct.pack(fmt, data)
            bf.write(p_data)

# s = '''
#     {0x80,0x50,{0x46,0xd0,0x02,0x00,0x05,0x05,0x35,0x13,0x01,0x00,0x00,0x0f,0x64,0x50,0x53,0x02}},
# 	{0x80,0x60,{0x00,0x00,0x00,0x00,0x14,0x18,0x1a,0x1c,0x0f,0x05,0x00,0x00,0x00,0x00,0x3c,0x00}},
# 	{0x80,0x70,{0x53,0x11,0x14,0x00,0x00,0x84,0x00,0x00,0x00,0x00,0x00,0x64,0x1e,0x1e,0x8a,0x2a}},
# 	{0x80,0x80,{0x0b,0x46,0x48,0xad,0x06,0x60,0x32,0x62,0x52,0x02,0x24,0x00,0x00,0x32,0x6e,0x80}},
# 	{0x80,0x90,{0x19,0x02,0x00,0x00,0x54,0xb3,0x3c,0x9c,0x46,0x8c,0x50,0x7f,0x5a,0x76,0x64,0x6e}},
# 	{0x80,0xa0,{0x00,0x00,0x00,0x08,0x18,0x58,0x00,0xf0,0x30,0x20,0xff,0xf0,0x27,0x00,0x00,0x00}},
# 	{0x80,0xb0,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},
# 	{0x80,0xc0,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},
# 	{0x80,0xd0,{0x00,0x00,0x32,0x20,0x41,0x41,0x1e,0x00,0x00,0x00,0x00,0x00,0x0d,0x06,0x0c,0x05}},
# 	{0x80,0xe0,{0x0b,0x04,0x0a,0x03,0x09,0x02,0x08,0xff,0xff,0xff,0x12,0x11,0x0b,0x0a,0x09,0x08}},
# 	{0x80,0xf0,{0x07,0x06,0x05,0x04,0x03,0x02,0x01,0x00,0x0c,0x0d,0x0e,0x0f,0x10,0x13,0xff,0xff}},
# 	{0x81,0x00,{0xff,0xff,0xff,0xff,0x41,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x41,0x44}},
# 	{0x81,0x10,{0x40,0x00,0x3c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},
# 	{0x81,0x20,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa4,0x03,0x03,0x00,0x00}},
# 	{0x81,0x30,{0x32,0x00,0x00,0x00,0x00,0x00,0x46,0x32,0x00,0x00,0x00,0x00,0x9b,0xf6,0x00,0x00}},
# };
# '''


def bin_like_txt_2bin(source_path, dst_path):
    dst_file = open(dst_path, 'wb+')
    with open(source_path, 'r') as f:
        # data = f.read(2)
        # print(f.tell())
        # print(data)
        # data = f.read(2)
        # print(f.tell())
        # print(data)
        # n = 0
        # while n<100:
        while 1:
            data = f.read(2)
            if not data:
                break
            data = '0x' + data
            byte_data = parse_hex_str_to_int(data)
            data_byte = struct.pack('B', byte_data)
            dst_file.write(data_byte)
            # n += 1
    dst_file.close()


if __name__ == '__main__':
    # a = [
    #     ['0x94', 7, 2, '0x00', '0x00'],
    #     ['0x94', 225, 2, '0x07', '0x00'],
    #     ['0x94', 11, 2, '0x6A', '0x01'],
    # ]
    # # list2_to_bin(a)
    # # while 1:
    # #     pass
    # c_array_to_bin(s)
    bin_like_txt_2bin(r'C:\Users\123\Desktop\xn.txt', r'C:\Users\123\Desktop\xn.bin')

    # bin_like_txt_2bin(r'C:\Users\123\Desktop\schedule\传音\a.txt', r'C:\Users\123\Desktop\xn.bin')
